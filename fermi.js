document.addEventListener("DOMContentLoaded", function() {
    document.getElementById('submit').addEventListener('click', () => {
        submitAnswer();
    });
    document.getElementById("new-question").addEventListener('click', () => {
        newQuestion();
    })
    document.body.addEventListener('keydown', (event) => {
        keyPressed(event);
    });
    document.getElementById("dark-mode").addEventListener('click', (event) => {
        darkMode(event);
    });
    document.getElementById("change-new").addEventListener('click', () => {
        changeNew();
    });
    document.getElementById("change-math").addEventListener('click', () => {
        changeMath();
    });
    document.getElementById("forward").addEventListener('click', () => {
        forward();
    });
    document.getElementById("back").addEventListener('click', () => {
        back();
    });
    placeRandomQuestion();
    console.log("DATA LENGTH: ", data.length)
});

//SETTINGS
var mode = 0;
var numModes = 2;
var darkmode = false;
var curID = 0;
function keyPressed(event){
    if (event.key === "Enter") {
        submitAnswer();
    }else if (event.key=="ArrowRight"){
        forward();
    }else if (event.key=="ArrowLeft"){
        back();
    }  
}

function changeNew(){
    btn = document.getElementById("new-question");
    btn.innerText = "New Question";
    btn.classList.replace("btn-danger", "btn-success");
    document.getElementById("dropdown").classList.replace("btn-danger", "btn-success");
    mode = 0
}

function changeMath(){
    btn = document.getElementById("new-question");
    btn.innerText = "Math Question";
    btn.classList.replace("btn-success", "btn-danger"); 
    document.getElementById("dropdown").classList.replace("btn-success", "btn-danger");
    mode = 1;
}

function placeRandomQuestion(){
    curID = parseInt(Math.random() * data.length);
    question = data[curID];
    console.log(question);
    if (question.question.includes("DISCARD")){
        console.log("DISCARDED QUESTION")
        placeRandomQuestion();
        return;
    }
    let fullSource = `${question.source}${question.hasOwnProperty("number") ? ", #"+question.number:''}`
    placeQuestion(question.question, fullSource);
}
function placeQuestion(question, source){
    if(root==null){
        root = new LinkedNode(curID);
        curNode = root;
    }
    document.getElementById("question-box").innerHTML = 
        `<p>${question}</p>
        <small><i>${source}
        </i></small>`;
}

function placeMathQuestion(){
    curID = parseInt(Math.random() * data.length);
    question = data[curID];
    console.log(question);
    if (question.question.includes("DISCARD")){
        console.log("DISCARDED QUESTION")
        placeRandomQuestion();
        return;
    }
    let source = "Autogenerated Math Problem"
    document.getElementById("question-box").innerHTML = 
        `<p>${question.question}</p>
        <small><i>${source}
        </i></small>`;
}
function submitAnswer(){
    console.log("Question Submission");
    user = document.getElementById("answer-box").value;
    console.log("USER EMPTY", user == "");
    if (curNode.next == null){
        addNode(curID);
    }
    if (user==""){
        document.getElementById("answer-alert").innerHTML = 
        `
        <div class="alert alert-secondary" role="alert">
                    No answer provided
                  </div>
       `
       return;
    }
    ans = data[curID].answer;
    if (Math.abs(ans-user) == 0){
        document.getElementById("answer-alert").innerHTML = 
        `
        <div class="alert alert-primary" role="alert">
            Correct, 5 points!
        </div>
        `;
    }else if(Math.abs(ans-user) == 1){
        document.getElementById("answer-alert").innerHTML = 
        `
        <div class="alert alert-success" role="alert">
            3 points, answer was ${ans}
        </div>
        `;
    }else if(Math.abs(ans-user)==2){
        document.getElementById("answer-alert").innerHTML = 
        `
        <div class="alert alert-warning" role="alert">
            1 point, answer was ${ans}
        </div>
        `;
    }else{
        document.getElementById("answer-alert").innerHTML = 
        `
        <div class="alert alert-danger" role="alert">
            No points, answer was ${ans}
        </div>
        `;
    }
}

function newQuestion(){
    console.log("Question Generation");
    if(mode == 0){
        placeRandomQuestion();
    }else if(mode == 1){
        placeRandomQuestion();
        //placeMathQuestion();
    }
    
    document.getElementById("answer-alert").innerHTML = 
        `
        <div class="alert alert-secondary" role="alert">
                    No answer provided
                  </div>
       `
    document.getElementById("answer-box").value = "";
}

//Make function for customization of webpage dark mode
function darkMode(){
    btn = document.getElementById("dark-mode");
    if(btn.classList.contains("darkoff")){
        darkmode = true;
        console.log("Dark Mode");
        /*
        document.body.classList.remove("bg-light", "text-dark");
        document.body.classList.add("bg-dark", "text-white");

        document.getElementById("question-box").classList.add("bg-dark", "text-light", "border-secondary");
        document.getElementById("question-box").classList.remove("bg-light", "text-dark", "border-dark");

        document.getElementById("answer-box").classList.add("bg-dark", "text-light");
        document.getElementById("answer-box").classList.remove("bg-light", "text-dark");
        */

        //document.getElementById("answer-box").setAttribute("data-bs-theme", "dark");

        document.documentElement.setAttribute("data-bs-theme", "dark");
        btn.classList.remove("darkoff", "btn-outline-dark");
        btn.classList.add("darkon", "btn-outline-light");
        btn.innerHTML = `<i class="bi bi-brightness-high"></i>`;

        document.querySelectorAll('.btn-main').forEach(function(element) {
            element.classList.replace("text-light", "text-black");
        });
        document.querySelectorAll('.apply-bright-text').forEach(function(element) {
            element.classList.replace("text-dark", "text-light");
        });
    }else{
        darkmode = false;
        console.log("Light Mode");
        /*
        document.body.classList.remove("bg-dark", "text-white");
        document.body.classList.add("bg-light", "text-dark");

        document.getElementById("question-box").classList.remove("bg-dark", "text-light", "border-light");
        document.getElementById("question-box").classList.add("bg-light", "text-dark", "border-dark");

        document.getElementById("answer-box").classList.remove("bg-dark", "text-light");
        document.getElementById("answer-box").classList.add("bg-light", "text-dark");
        //document.getElementById("question-box").style.backgroundColor = "white";
        */

        //document.getElementById("answer-box").setAttribute("data-bs-theme", "light");

        document.documentElement.setAttribute("data-bs-theme", "light");
        btn.classList.remove("darkon", "btn-outline-light");
        btn.classList.add("darkoff", "btn-outline-dark");
        btn.innerHTML = `<i class="bi bi-moon-stars-fill"></i>`;
        
        document.querySelectorAll('.btn-main').forEach(function(element) {
            element.classList.replace("text-black", "text-light");
        });
        document.querySelectorAll('.apply-bright-text').forEach(function(element) {
            element.classList.replace("text-light", "text-dark");
        });
    }
    

}

let root = null;
let curNode = null;

function forward(){
    console.log("Forward");
    if(curNode.next == null){
        newQuestion(); 
        return;
    }
    
    curNode = curNode.next;
    curID = curNode.ID;
    question = data[curID];

    let fullSource = `${question.source}${question.hasOwnProperty("number") ? ", #"+question.number:''}`
    placeQuestion(question.question, fullSource);
}

function back(){
    console.log("Back");
    if(curNode.prev == null){
        curNode = root;
    }else{
        curNode = curNode.prev;
    }
    curID = curNode.ID;
    question = data[curID];

    let fullSource = `${question.source}${question.hasOwnProperty("number") ? ", #"+question.number:''}`
    placeQuestion(question.question, fullSource);
}

function addNode(){
    let newNode = new LinkedNode(curID);
    if(root == null){
        root = newNode;
        curNode = newNode;
    }else{
        curNode.setNext(newNode);
        newNode.setPrev(curNode);
        curNode = newNode;
    }
}

class LinkedNode{
    constructor(ID){
        this.prev = null;
        this.ID = ID;
        this.next = null;
    }

    setNext(next){
        this.next = next;
    }

    setPrev(prev){
        this.prev = prev;
    }
}

class MathQuestion{
    static formatList = [
        "NUM1 ^ NUM2",
        "NUM1!"
    ];
    constructor(){
        this.question = "";
        this.answer = 0;
    }
}

